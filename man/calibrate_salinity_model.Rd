% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/salinity-calibrate-model.R
\name{calibrate_salinity_model}
\alias{calibrate_salinity_model}
\title{Calibrate salinity model to data}
\usage{
calibrate_salinity_model(
  hydro_data,
  v,
  method = "Nelder-Mead",
  control = list(trace = T)
)
}
\arguments{
\item{hydro_data}{data.frame containing \code{S_ppm}, \code{Q_cumec}, and \code{year} columns}

\item{v}{logged parameters as a vector: log(a), log(b), log(d), log(C_d). Use NA for calibration params}

\item{method}{"Nelder-Mead" or method supplied to \code{stats::optim} details below}

\item{control}{control parameters supplied to \code{stats::optim} for the \code{SANN} optimization}
}
\value{
The function returns a vector of all (logged) parameters including calibrated ones
}
\description{
Calibrate some or all salinity model parameters a, b, d, and C_d using salinity data.
}
\details{
This function calibrates the parameters in \code{v} set to NA using streamflow and salinity in \code{hydro_data}.
The calibration is done by minimizing the sum of squared error of the modeled salinity with observed salinity.
The minimization is performed using \code{stats::optim} function with simulated annealing.

Note that any values of \code{hydro_data$S_ppm} that are set to NA will be ignored in the calibration.
In other words, it's possible to calibrate on a subset of dates within this data.frame.

The \code{method} input can be set to "auto", in which case "Nelder-Mead" is used for multi-variate
optimization and for univariate optimization ("Brent" has given poor results). This can also be set
to any of the \code{method}
options allowed by \code{stats::optim} -- see \code{?optim} for details.
}
\examples{
library(deltasalinity)
hydro_data <- ganges_streamflow
hydro_data$S_ppm_orig <- sim_salin_annual(ganges_streamflow, ganges_params$param)

# Add random error to salinity output
set.seed(100)
hydro_data$S_ppm <- hydro_data$S_ppm_orig * runif(nrow(hydro_data), min = 0.9, max = 1.1)
hydro_data$year <- as.numeric(strftime(hydro_data$date,"\%Y"))

# Calibrate parameter "a"
\dontrun{
# Nelder-Mead produces a warning with only 1 optimization parameter. Still seems to work though.
v <- ganges_params$param
v[1] <- NA
v_calibrated <- calibrate_salinity_model(hydro_data, v) # warning expected for Nelder-Mead

# Check the percent difference
(v_calibrated - ganges_params$param) / ganges_params$param * 100
}

# Calibrate parameters "b" and "d"
v <- ganges_params$param
v[c(2,3)] <- NA
v_calibrated <- calibrate_salinity_model(hydro_data, v)
v_calibrated

# Check the percent difference
(v_calibrated - ganges_params$param) / ganges_params$param * 100
}
